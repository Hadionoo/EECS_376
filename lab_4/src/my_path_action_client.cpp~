

#include <ros/ros.h>
#include <actionlib/client/simple_action_client.h>
#include <lab_4_client/path_msgAction.h>
#include <example_ros_service/PathSrv.h>
#include <nav_msgs/Path.h>
#include <geometry_msgs/Twist.h>
#include <iostream>
#include <string>
#include <math.h>
#include <std_msgs/Bool.h>
#include <std_msgs/Float64.h> 
using namespace std;

bool g_lidar_alarm=false; // global var for lidar alarm

void alarmCallback(const std_msgs::Bool& alarm_msg) 
{ 
    ROS_INFO("Callback");
  g_lidar_alarm = alarm_msg.data; //make the alarm status global, so main() can use it
  if (g_lidar_alarm) {
     ROS_INFO("LIDAR alarm received!"); 
  }
} 

void doneCb(const actionlib::SimpleClientGoalState& state, const my_path_action_server::path_msgResultConstPtr& result){
        ROS_INFO("doneCB: this is the result message!");
        ROS_INFO("my_path_action_server executed your request for pose!");
        //timer_msg = result->result_msg;
        //ROS_INFO("it took %f seconds", res_msg);
}

int main(int argc, char** argv) {
    ros::init(argc,argv, "my_path_action_client");
        actionlib::SimpleActionClient<my_path_action_server::path_msgAction> action_client("path_action", true);
    my_path_action_server::path_msgGoal goal;


    // attempt to connect to the server:
    ROS_INFO("waiting for server: ");
    bool server_exists = action_client.waitForServer(ros::Duration(10.0)); // wait for up to 5 seconds
   

    if (!server_exists) {
        ROS_WARN("could not connect to server; halting");
        return 0; 
    }

    ROS_INFO("connected to action server");  
    while(true){
       // ros::Rate timer(2.0);
        ros::NodeHandle n;
    ros::Subscriber alarm_subscriber = n.subscribe("lidar_alarm",1,alarmCallback);
     double sample_dt = 0.01; //specify a sample period of 10ms  
    double speed = 0.1; // 1m/s speed command
    double yaw_rate = 1; //0.5 rad/sec yaw rate command
    double time_3_sec = 3.0; // should move 3 meters or 1.5 rad in 3 seconds
    geometry_msgs::Twist twist_cmd;
    bool lastMsg;
    lastMsg = ros::topic::waitForMessage <std_msgs::Bool>("lidar_alarm");
    ROS_INFO("message is %d", lastMsg);
        while(!g_lidar_alarm){
                // action_client.cancelAllGoals();

            ROS_INFO("No alarm");
        twist_cmd.linear.x=speed;
    twist_cmd.linear.y=0.0;    
    twist_cmd.linear.z=0.0;
    twist_cmd.angular.x=0.0;
    twist_cmd.angular.y=0.0;
    twist_cmd.angular.z=0.0;  
        goal.pose = twist_cmd;
                action_client.sendGoal(goal,&doneCb);
ros::spinOnce();
        }
       //action_client.isPreemptRequested(); // THIS LINE NEEDS TO CANCEL CURRENT GOAL
        //SUPPOSED TO SPIN HERE
           //ros::Publisher twist_cmd_publisher = n.advertise<geometry_msgs::Twist>("/robot0/cmd_vel", 1);
while(g_lidar_alarm){
         //action_client.cancelAllGoals();
ROS_INFO("ALARM ON");
    twist_cmd.linear.x=0.0;
    twist_cmd.linear.y=0.0;    
    twist_cmd.linear.z=0.0;
    twist_cmd.angular.x=0.0;
    twist_cmd.angular.y=0.0;
    //twist_cmd_publisher.publish(twist_cmd);
    twist_cmd.angular.z=yaw_rate;  
        goal.pose = twist_cmd;
        action_client.sendGoal(goal,&doneCb);
    ros::spinOnce();
}
                ROS_INFO("Sent Pose");


        bool finished_before_timeout = action_client.waitForResult(ros::Duration(20.0));


        if(!finished_before_timeout) {
         ROS_INFO("did not finish");
          return 0;
        } 
        //timer.sleep();
//action_client.cancelAllGoals();
        ros::spinOnce();
    }
    return 0;
}

